BT_score[unlist(lapply(names(coef),function(i){substr(i, 5, nchar(i))})),i-min(dat$season)+1]=coef
}
# Loop through for all seasons in the dataframe
for (i in min(dat$season): max(dat$season)){
# Subset the dataframe for only one season
dat_season=dat[dat$season==i,]
# Count a home team win if result is equal to 0
home.wins = (dat_season$result>0)*1
# print(home.wins)
# Assign variables in a different way
home.team = factor(dat_season$home_team, levels = unique(c(dat_season$home_team,dat_season$away_team)))
away.team = factor(dat_season$away_team, levels = unique(c(dat_season$home_team,dat_season$away_team)))
# Create a list of inputs for the model to run
football = list(home.team=data.frame(team = dat_season$home_team, at.home = 1),
away.team=data.frame(team = dat_season$away_team, at.home = 0))
# print(football)
# Try running the model
mod1 = BTm(outcome = home.wins, player1 = home.team, player2 = away.team,
formula = ~ team + at.home, id = "team",data = football, family =binomial(link = "logit"))
coef=mod1$coefficients[1:(length(mod1$coefficients)-1)]
BT_score[unlist(lapply(names(coef),function(i){substr(i, 5, nchar(i))})),i-min(dat$season)+1]=coef
}
# Loop through for all seasons in the dataframe
for (i in min(dat$season): max(dat$season)){
# Subset the dataframe for only one season
dat_season=dat[dat$season==i,]
# Count a home team win if result is equal to 0
home.wins = (dat_season$result>0)*1
# print(home.wins)
# Assign variables in a different way
# home.team = factor(dat_season$home_team, levels = unique(c(dat_season$home_team,dat_season$away_team)))
# away.team = factor(dat_season$away_team, levels = unique(c(dat_season$home_team,dat_season$away_team)))
# Create a list of inputs for the model to run
football = list(home.team=data.frame(team = dat_season$home_team, at.home = 1),
away.team=data.frame(team = dat_season$away_team, at.home = 0))
print(football)
# Try running the model
mod1 = BTm(outcome = home.wins, player1 = home.team, player2 = away.team,
formula = ~ team + at.home, id = "team",data = football, family =binomial(link = "logit"))
coef=mod1$coefficients[1:(length(mod1$coefficients)-1)]
BT_score[unlist(lapply(names(coef),function(i){substr(i, 5, nchar(i))})),i-min(dat$season)+1]=coef
}
# Loop through for all seasons in the dataframe
for (i in min(dat$season): max(dat$season)){
# Subset the dataframe for only one season
dat_season=dat[dat$season==i,]
# Count a home team win if result is equal to 0
home.wins = (dat_season$result>0)*1
# print(home.wins)
# Assign variables in a different way
home.team = factor(dat_season$home_team, levels = unique(c(dat_season$home_team,dat_season$away_team)))
away.team = factor(dat_season$away_team, levels = unique(c(dat_season$home_team,dat_season$away_team)))
# Create a list of inputs for the model to run
football = list(home.team=data.frame(team = home.team, at.home = 1),
away.team=data.frame(team = away.team, at.home = 0))
# print(football)
# Try running the model
mod1 = BTm(outcome = home.wins, player1 = home.team, player2 = away.team,
formula = ~ team + at.home, id = "team",data = football, family =binomial(link = "logit"))
coef=mod1$coefficients[1:(length(mod1$coefficients)-1)]
BT_score[unlist(lapply(names(coef),function(i){substr(i, 5, nchar(i))})),i-min(dat$season)+1]=coef
}
mod1
coef
# Load the library
library(BradleyTerry2)
# Modified this location
# setwd("/Users/stevenmoen/Documents/GitHub/PhD_stat_codes/Fall_2020/STAT_992/Project/NFL_data")
dat= read.table('/Users/stevenmoen/Documents/GitHub/PhD_stat_codes/Fall_2020/STAT_992/Project/NFL_data/games.csv', sep=',', header=T,  row.names = NULL, fill=T, quote='', stringsAsFactors = FALSE)
# Look at the data
# dat
#dat <- readr::read_csv("http://www.habitatring.com/games.csv")
## Data begins with the 2006 NFL season. Does not include preseason.
dat = dat[dat$season>=2006,]
head(dat)
## Delete games with missing entries in game results, 16 games in season 2020 were deleted
dat <-  data.frame(dat[complete.cases(dat[,8:11]),])
# STM Edits <- Go ahead and delete all of 2020 as well
dat = dat[dat$season<2020,]
tail(dat, 40)
# Also, let's get rid of all playoff games
dat = dat[dat$game_type=="REG",]
## proportion of ties
print(mean(dat$result==0) )
## Delete ties
dat <- dat[dat$result!=0,]
## number of games per season
print(table(dat$season))
### fit BT by season ###
# BT_score is a matrix storing BT scores for all seasons
BT_score = matrix(NA, nrow = length(unique(dat$home_team)), ncol=length(unique(dat$season)))
# Sore the team names
rownames(BT_score)=sort(unique(dat$home_team))
# Organize the seasons
colnames(BT_score)=paste0('season',min(dat$season): max(dat$season))
# Let's examine the matrix
BT_score
# team ARI is used as control
BT_score['ARI',] = 0
# Loop through for all seasons in the dataframe
for (i in min(dat$season): max(dat$season)){
# Subset the dataframe for only one season
dat_season=dat[dat$season==i,]
# Count a home team win if result is equal to 0
home.wins = (dat_season$result>0)*1
# print(home.wins)
# Assign variables in a different way
home.team = factor(dat_season$home_team, levels = unique(c(dat_season$home_team,dat_season$away_team)))
away.team = factor(dat_season$away_team, levels = unique(c(dat_season$home_team,dat_season$away_team)))
# Create a list of inputs for the model to run
football = list(home.team=data.frame(team = home.team, at.home = 1),
away.team=data.frame(team = away.team, at.home = 0))
# print(football)
# Try running the model
mod1 = BTm(outcome = home.wins, player1 = home.team, player2 = away.team,
formula = ~ team + at.home, id = "team",data = football, family =binomial(link = "logit"))
# Extract the model coefficients
coef=mod1$coefficients[1:(length(mod1$coefficients)-1)]
# Stores the coefficients in a list
BT_score[unlist(lapply(names(coef),function(i){substr(i, 5, nchar(i))})),i-min(dat$season)+1]=coef
}
# coef
mod1
BT_score = BT_score[complete.cases(BT_score),]
cormat = cor(BT_score, method='spearman')
diag(cormat)=NA
library(reshape2)
library(ggplot2)
# Reorder the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Spearman\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 8, hjust = 1),
axis.text.y = element_text(size = 8))+
coord_fixed()
ggheatmap +
geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 2) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
coef
mod1
BT_score
BT_score = BT_score[complete.cases(BT_score),]
cormat = cor(BT_score, method='spearman')
diag(cormat)=NA
# Reorder the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Spearman\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 8, hjust = 1),
axis.text.y = element_text(size = 8))+
coord_fixed()
ggheatmap +
geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 2) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
#########################################################
# Subset the data
season=2007:2019
test_acc= matrix(0, nrow=length(season), ncol=3)
# Loop through
for (i in season){
dat_train=dat[dat$season==i-1,]
home.wins = 1*(dat_train$home_score> dat_train$away_score)
football_train = list(home.team = data.frame(team = dat_train$home_team, at.home = 1),
away.team = data.frame(team = dat_train$away_team, at.home = 0))
mod1 = BTm(outcome = home.wins, player1 = home.team, player2 = away.team,
formula = ~ team + at.home , id = "team", data = football_train, family = binomial(link = "logit"))
dat_test=dat[dat$season==i,]
football_test = list(home.team=data.frame(team = dat_test$home_team, at.home = 1),
away.team=data.frame(team = dat_test$away_team, at.home = 0))
test_acc[i-2006,]=c(
mean((predict(mod1, newdata=football_test)>0)*1 == (dat_test$result>0)*1),
mean((dat_test$spread_line>0)*1 == (dat_test$result>0)*1),
sum(!(unique(c(dat_test$home_team, dat_test$away_team))%in%unique(c(dat_train$home_team, dat_train$away_team)))
))
}
#########################################################
# Subset the data
season=2007:2019
test_acc= matrix(0, nrow=length(season), ncol=3)
# Loop through
for (i in season){
dat_train=dat[dat$season==i-1,]
home.wins = 1*(dat_train$home_score> dat_train$away_score)
# Assign variables in a different way
home.team = factor(dat_train$home_team, levels = unique(c(dat_train$home_team,dat_train$away_team)))
away.team = factor(dat_train$away_team, levels = unique(c(dat_train$home_team,dat_train$away_team)))
# Create a list of inputs for the model to run
football_train = list(home.team=data.frame(team = home.team, at.home = 1),
away.team=data.frame(team = away.team, at.home = 0))
# football_train = list(home.team = data.frame(team = dat_train$home_team, at.home = 1),
# away.team = data.frame(team = dat_train$away_team, at.home = 0))
mod1 = BTm(outcome = home.wins, player1 = home.team, player2 = away.team,
formula = ~ team + at.home , id = "team", data = football_train, family = binomial(link = "logit"))
# Test the model
dat_test=dat[dat$season==i,]
football_test = list(home.team=data.frame(team = dat_test$home_team, at.home = 1),
away.team=data.frame(team = dat_test$away_team, at.home = 0))
test_acc[i-2006,]=c(
mean((predict(mod1, newdata=football_test)>0)*1 == (dat_test$result>0)*1),
mean((dat_test$spread_line>0)*1 == (dat_test$result>0)*1),
sum(!(unique(c(dat_test$home_team, dat_test$away_team))%in%unique(c(dat_train$home_team, dat_train$away_team)))
))
}
#########################################################
# Subset the data
season=2007:2019
test_acc= matrix(0, nrow=length(season), ncol=3)
# Loop through
for (i in season){
dat_train=dat[dat$season==i-1,]
home.wins = 1*(dat_train$home_score> dat_train$away_score)
# Assign variables in a different way
home.team = factor(dat_train$home_team, levels = unique(c(dat_train$home_team,dat_train$away_team)))
away.team = factor(dat_train$away_team, levels = unique(c(dat_train$home_team,dat_train$away_team)))
# Create a list of inputs for the model to run
football_train = list(home.team=data.frame(team = home.team, at.home = 1),
away.team=data.frame(team = away.team, at.home = 0))
# football_train = list(home.team = data.frame(team = dat_train$home_team, at.home = 1),
# away.team = data.frame(team = dat_train$away_team, at.home = 0))
mod1 = BTm(outcome = home.wins, player1 = home.team, player2 = away.team,
formula = ~ team + at.home , id = "team", data = football_train, family = binomial(link = "logit"))
# Test the model
dat_test=dat[dat$season==i,]
# Assign variables in a different way
home.team = factor(dat_test$home_team, levels = unique(c(dat_test$home_team,dat_test$away_team)))
away.team = factor(dat_test$away_team, levels = unique(c(dat_test$home_team,dat_test$away_team)))
# Create a list of inputs for the model to run
football_test = list(home.team=data.frame(team = home.team, at.home = 1),
away.team=data.frame(team = away.team, at.home = 0))
# football_test = list(home.team=data.frame(team = dat_test$home_team, at.home = 1),
# away.team=data.frame(team = dat_test$away_team, at.home = 0))
test_acc[i-2006,]=c(
mean((predict(mod1, newdata=football_test)>0)*1 == (dat_test$result>0)*1),
mean((dat_test$spread_line>0)*1 == (dat_test$result>0)*1),
sum(!(unique(c(dat_test$home_team, dat_test$away_team))%in%unique(c(dat_train$home_team, dat_train$away_team)))
))
}
colnames(test_acc)=c('BT accuracy', 'spread line accuracy', 'num new teams')
rownames(test_acc)=paste0('season_', season)
test_acc
test_acc
#########################################################
# Subset the data
season=2007:2019
test_acc= matrix(0, nrow=length(season), ncol=3)
# Loop through
for (i in season){
dat_train=dat[dat$season==i-1,]
home.wins = 1*(dat_train$home_score> dat_train$away_score)
# Assign variables in a different way
home.team = factor(dat_train$home_team, levels = unique(c(dat_train$home_team,dat_train$away_team)))
away.team = factor(dat_train$away_team, levels = unique(c(dat_train$home_team,dat_train$away_team)))
# Create a list of inputs for the model to run
football_train = list(home.team=data.frame(team = home.team, at.home = 1),
away.team=data.frame(team = away.team, at.home = 0))
# football_train = list(home.team = data.frame(team = dat_train$home_team, at.home = 1),
# away.team = data.frame(team = dat_train$away_team, at.home = 0))
mod1 = BTm(outcome = home.wins, player1 = home.team, player2 = away.team,
formula = ~ team + at.home , id = "team", data = football_train, family = binomial(link = "logit"))
# Test the model
dat_test=dat[dat$season==i,]
# Assign variables in a different way
home.team = factor(dat_test$home_team, levels = unique(c(dat_test$home_team,dat_test$away_team)))
away.team = factor(dat_test$away_team, levels = unique(c(dat_test$home_team,dat_test$away_team)))
# Create a list of inputs for the model to run
football_test = list(home.team=data.frame(team = home.team, at.home = 1),
away.team=data.frame(team = away.team, at.home = 0))
# football_test = list(home.team=data.frame(team = dat_test$home_team, at.home = 1),
# away.team=data.frame(team = dat_test$away_team, at.home = 0))
test_acc[i-2006,]=c(
mean((predict(mod1, newdata=football_test)>0)*1 == (dat_test$result>0)*1),
mean((dat_test$spread_line>0)*1 == (dat_test$result>0)*1),
sum(!(unique(c(dat_test$home_team, dat_test$away_team))%in%unique(c(dat_train$home_team, dat_train$away_team)))
))
}
# test_acc
colnames(test_acc)=c('BT accuracy', 'spread line accuracy', 'num new teams')
rownames(test_acc)=paste0('season_', season)
test_acc
football_test
mod1
predict(mod1, newdata= football_test)
tail(football_test)
print(football_test[[254]])
print(football_test[[1]][254])
print(football_test[[1]][254,])
print(football_test[[2]][254,])
football_train
sessionInfo()
knitr::opts_chunk$set(cache=TRUE,
message=FALSE, warning=FALSE)
# Load the library
library(BradleyTerry2)
# Modified this location
# setwd("/Users/stevenmoen/Documents/GitHub/PhD_stat_codes/Fall_2020/STAT_992/Project/NFL_data")
dat= read.table('/Users/stevenmoen/Documents/GitHub/PhD_stat_codes/Fall_2020/STAT_992/Project/NFL_data/games.csv', sep=',', header=T,  row.names = NULL, fill=T, quote='', stringsAsFactors = FALSE)
# Look at the data
# dat
#dat <- readr::read_csv("http://www.habitatring.com/games.csv")
## Data begins with the 2006 NFL season. Does not include preseason.
dat = dat[dat$season>=2006,]
# head(dat)
## Delete games with missing entries in game results, 16 games in season 2020 were deleted
dat <-  data.frame(dat[complete.cases(dat[,8:11]),])
# STM Edits <- Go ahead and delete all of 2020 as well
# dat = dat[dat$season<2020,]
# tail(dat, 40)
# Also, let's get rid of all playoff games
# dat = dat[dat$game_type=="REG",]
## proportion of ties
print(mean(dat$result==0) )
## Delete ties
dat <- dat[dat$result!=0,]
## number of games per season
print(table(dat$season))
### fit BT by season ###
# BT_score is a matrix storing BT scores for all seasons
BT_score = matrix(NA, nrow = length(unique(dat$home_team)), ncol=length(unique(dat$season)))
# Sore the team names
rownames(BT_score)=sort(unique(dat$home_team))
# Organize the seasons
colnames(BT_score)=paste0('season',min(dat$season): max(dat$season))
# Let's examine the matrix
BT_score
# team ARI is used as control
BT_score['ARI',] = 0
# Loop through for all seasons in the dataframe
for (i in min(dat$season): max(dat$season)){
# Subset the dataframe for only one season
dat_season=dat[dat$season==i,]
# Count a home team win if result is equal to 0
home.wins = (dat_season$result>0)*1
# print(home.wins)
# Assign variables in a different way
home.team = factor(dat_season$home_team, levels = unique(c(dat_season$home_team,dat_season$away_team)))
away.team = factor(dat_season$away_team, levels = unique(c(dat_season$home_team,dat_season$away_team)))
# Create a list of inputs for the model to run
football = list(home.team=data.frame(team = home.team, at.home = 1),
away.team=data.frame(team = away.team, at.home = 0))
# print(football)
# Try running the model
mod1 = BTm(outcome = home.wins, player1 = home.team, player2 = away.team,
formula = ~ team + at.home, id = "team",data = football, family =binomial(link = "logit"))
# Extract the model coefficients
coef=mod1$coefficients[1:(length(mod1$coefficients)-1)]
# Stores the coefficients in a list
BT_score[unlist(lapply(names(coef),function(i){substr(i, 5, nchar(i))})),i-min(dat$season)+1]=coef
}
# coef
# BT_score
# mod1
BT_score = BT_score[complete.cases(BT_score),]
cormat = cor(BT_score, method='spearman')
diag(cormat)=NA
library(reshape2)
library(ggplot2)
# Reorder the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Spearman\nCorrelation") +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 8, hjust = 1),
axis.text.y = element_text(size = 8))+
coord_fixed()
ggheatmap +
geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = 2) +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal")+
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
#########################################################
# Subset the data
season=2007:2019
test_acc= matrix(0, nrow=length(season), ncol=3)
# Loop through
for (i in season){
dat_train=dat[dat$season==i-1,]
home.wins = 1*(dat_train$home_score> dat_train$away_score)
# Assign variables in a different way
home.team = factor(dat_train$home_team, levels = unique(c(dat_train$home_team,dat_train$away_team)))
away.team = factor(dat_train$away_team, levels = unique(c(dat_train$home_team,dat_train$away_team)))
# Create a list of inputs for the model to run
football_train = list(home.team=data.frame(team = home.team, at.home = 1),
away.team=data.frame(team = away.team, at.home = 0))
# football_train = list(home.team = data.frame(team = dat_train$home_team, at.home = 1),
# away.team = data.frame(team = dat_train$away_team, at.home = 0))
mod1 = BTm(outcome = home.wins, player1 = home.team, player2 = away.team,
formula = ~ team + at.home , id = "team", data = football_train, family = binomial(link = "logit"))
# Test the model
dat_test=dat[dat$season==i,]
# Assign variables in a different way
home.team = factor(dat_test$home_team, levels = unique(c(dat_test$home_team,dat_test$away_team)))
away.team = factor(dat_test$away_team, levels = unique(c(dat_test$home_team,dat_test$away_team)))
# Create a list of inputs for the model to run
football_test = list(home.team=data.frame(team = home.team, at.home = 1),
away.team=data.frame(team = away.team, at.home = 0))
# football_test = list(home.team=data.frame(team = dat_test$home_team, at.home = 1),
# away.team=data.frame(team = dat_test$away_team, at.home = 0))
test_acc[i-2006,]=c(
mean((predict(mod1, newdata=football_test)>0)*1 == (dat_test$result>0)*1),
mean((dat_test$spread_line>0)*1 == (dat_test$result>0)*1),
sum(!(unique(c(dat_test$home_team, dat_test$away_team))%in%unique(c(dat_train$home_team, dat_train$away_team)))
))
}
# test_acc
colnames(test_acc)=c('BT accuracy', 'spread line accuracy', 'num new teams')
rownames(test_acc)=paste0('season_', season)
test_acc
football_test
mod1
predict(mod1, newdata = football_test)
football_test[8]
football_test[[1]][8,]
# Problem solving
football_test[[1]][8,]
football_test[[2]][8,]
football_train[[1]]
football_train[[1]]$team == PHI
football_train[[1]]$team == "PHI"
football_train[[2]]$team == "PHI"
football_train[[2]]$team == "WAS"
predict(mod1, newdata = football_test)
predict(mod1, newdata = football_test[8])
predict(mod1, newdata = football_test[[8]])
football_test
football_test
football_test[[1]]
football_test[[1]]
football_test[[1]][8]
football_test[[1]][8,]
dat_test$result
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
getwd()
ls()
setwd("~/Documents/GitHub/stat_992_project")
citr:::insert_citation()
getwd()
